" get pathogen going
execute pathogen#infect()

" lets make the most kickass status line ever
set statusline=
set statusline=%t       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%{fugitive#statusline()}
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" 2 = always show the status bar
set laststatus=2

" syntax?  uh, yeah
syntax on

" language specific tabs
filetype plugin indent on

" do some tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
set expandtab

" the backups/swapfiles are nothing but annoying to me
set nobackup
set noswapfile

" switching between windows should be easier
map <c-j> <c-w>h
map <c-k> <c-w>l

" switch between previous and next buffers
map <c-i> :BufSurfForward<CR>
map <c-u> :BufSurfBack<CR>

" this isn't working for some reason. need to fix
" NERD tree shouldn't show up in the BufSurf
" Maybe try a different plugin?
 let g:BufSurfIgnore = 'NERD_tree'
 let g:BufSurfMessages = 1

" show ctrl characters
set list

" show line numbers
set number

" allow 256 colors in here
set t_Co=256

" railscast theme
" https://github.com/ryanb/dotfiles/blob/master/vim/colors/railscasts.vim
colorscheme railscasts

" highlight cursor, only on current window
set cursorline
hi CursorLine cterm=NONE ctermbg=234

augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

" allow to switch buffers even if one is unsaved
set hidden

" set the leader
let mapleader = "\<Space>"

" NERDTree settings
let g:NERDTreeWinPos = "right"

" close if nerdtree is the only thing left open
" autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
" function! s:CloseIfOnlyNerdTreeLeft()
"   if exists("t:NERDTreeBufName")
"     if bufwinnr(t:NERDTreeBufName) != -1
"       if winnr("$") == 1
"         q
"       endif
"     endif
"   endif
" endfunction

" Ctrl-e to toggle nerd tree
nnoremap <C-e> :NERDTreeToggle<CR>

" Auto close nerd tree after opening a file
let NERDTreeQuitOnOpen = 1

" don't allow arrow keys.
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" set font when using gvim
if has("gui_running")
  if has("gui_win32")
    set guifont=Consolas:h10:cANSI
  endif
endif

" ruby sinatra wasn't defined in tcomment
call tcomment#DefineType('ruby-sinatra',     '# %s'             )

" ruby should only do 2 spaces for some reason
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype coffee setlocal ts=2 sts=2 sw=2

" macvim gui options
set guioptions=aiAe

" close buffer without closing window

" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
  finish
endif
let loaded_bclose = 1
if !exists('bclose_multiple')
  let bclose_multiple = 1
endif

" Display an error message.
function! s:Warn(msg)
  echohl ErrorMsg
  echomsg a:msg
  echohl NONE
endfunction

" Command ':Bclose' executes ':bd' to delete buffer in current window.
" The window will show the alternate buffer (Ctrl-^) if it exists,
" or the previous buffer (:bp), or a blank buffer if no previous.
" Command ':Bclose!' is the same, but executes ':bd!' (discard changes).
" An optional argument can specify which buffer to close (name or number).
function! s:Bclose(bang, buffer)
  if empty(a:buffer)
    let btarget = bufnr('%')
  elseif a:buffer =~ '^\d\+$'
    let btarget = bufnr(str2nr(a:buffer))
  else
    let btarget = bufnr(a:buffer)
  endif
  if btarget < 0
    call s:Warn('No matching buffer for '.a:buffer)
    return
  endif
  if empty(a:bang) && getbufvar(btarget, '&modified')
    call s:Warn('No write since last change for buffer '.btarget.' (use :Bclose!)')
    return
  endif
  " Numbers of windows that view target buffer which we will delete.
  let wnums = filter(range(1, winnr('$')), 'winbufnr(v:val) == btarget')
  if !g:bclose_multiple && len(wnums) > 1
    call s:Warn('Buffer is in multiple windows (use ":let bclose_multiple=1")')
    return
  endif
  let wcurrent = winnr()
  for w in wnums
    execute w.'wincmd w'
    let prevbuf = bufnr('#')
    if prevbuf > 0 && buflisted(prevbuf) && prevbuf != w
      buffer #
    else
      bprevious
    endif
    if btarget == bufnr('%')
      " Numbers of listed buffers which are not the target to be deleted.
      let blisted = filter(range(1, bufnr('$')), 'buflisted(v:val) && v:val != btarget')
      " Listed, not target, and not displayed.
      let bhidden = filter(copy(blisted), 'bufwinnr(v:val) < 0')
      " Take the first buffer, if any (could be more intelligent).
      let bjump = (bhidden + blisted + [-1])[0]
      if bjump > 0
        execute 'buffer '.bjump
      else
        execute 'enew'.a:bang
      endif
    endif
  endfor
  execute 'bdelete'.a:bang.' '.btarget
  execute wcurrent.'wincmd w'
endfunction
command! -bang -complete=buffer -nargs=? Bclose call s:Bclose('<bang>', '<args>')
nnoremap <silent> <Leader>bd :Bclose<CR>
